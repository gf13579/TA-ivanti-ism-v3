{"alert_action_builder": {"modular_alerts": [{"description": "This alert action will create an Incident in ISM based on the search results", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAABvElEQVR4Xu2csU4CQRRF37jrUlMYoJCgfp+FjQkxkcJfMLG3oLCy0YZYoMba+BFKY6OgCQTWsLAxhCBMLgtqznQk82Y2Z8+7G1gyLo7j2BgzCbgEUL9vca8HppSAc+ZyueRTAqhz27TWcRVAYwJRuWLb5/VvQO2bhj0f7AMoBbS7Z5XLKwDNMiIC0M/NAqA5YQIgAGnPGwzCIAzSCGCQxo8MwiAM0ghgkMaPDMIgDNIIYJDGjwzCIAzSCGCQxo8MwiAM0ghgkMZvKoPibtcGnba26gqqX6qH9vFwn/lOU4Ay33FJGwxfjw9fk2c9AOSbQVnfkWWtj0FzSAIIQFqzYRAGYZBGAIM0fmQQBv1Rg5Ivq+9v2tUvWr0RWJDPLzp7Yt7aWmyV/5MOiyXbuW6YC0NvSAD6rRmEQZN3Zq0/2tNic9oEQADyfvhMFGAQBmGQRgCDNH5kEAZhkEYAgzR+ZBAGYZBGAIM0fmQQBmGQRgCDNH5kEAZhkEbgPxrUuWtaq3aUKZh08XCrYOX6hbkg8N7v9ezUPp8evet8CzaLJSvUTpKy0SFvg8HqDnkbHqAWRb7XvLb5I0CMmQS+APuLb1Zj7eZyAAAAAElFTkSuQmCC", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAA/0lEQVRYR2P8/+/f//9//zIMBsDIwsLA+PP+vf8Pw4MG3D3MAoIMSjv3MTD+vHvn/4MA74F3kKAgg/LB46MOwhkTzKMhRCCVjoYQoWw8GkKjIUQoBAjJD9409Oftm//vFswj5AGS5H/dv8vw9eABkvTAQ+j/////SdJJhOLPO7YxPC8rIkIlQsmogwgF12gIDd0QAmf7+XMJeQBDntvekYHLxBSrPopyGbltapHiMgah+KRRB+GMytEQIpTKR0NoNIQo7SiOpqHRNARPQ6ABq4hgQgGCIS+SW8ggGB2LVd/XQwcYXnW2kWQmMz8/g9yy1QyM5A7pMTIxMTCAMJUBAA7SZ6QxIwTlAAAAAElFTkSuQmCC", "short_name": "create_an_incident_in_ism", "label": "Create an Incident in ISM", "active_response": {"technology": [{"vendor": "Ivanti", "product": "ISM", "version": ["1.0.0"]}], "supports_adhoc": true, "category": ["Information Tracking"], "task": ["create"], "subject": ["ticket"]}, "parameters": [{"format_type": "text", "required": true, "name": "customer", "label": "Customer LoginID", "default_value": "", "help_string": "", "type": "", "value": "greg.ford"}, {"format_type": "text", "required": true, "name": "summary", "label": "Summary", "default_value": "", "help_string": "", "type": "", "value": "This is yet another summary 01"}, {"format_type": "text", "required": true, "name": "description", "label": "Description", "default_value": "", "help_string": "", "type": "", "value": "Another description 01"}, {"format_type": "text", "required": true, "name": "status", "label": "Status", "default_value": "Logged", "help_string": "", "type": "", "value": "Logged"}, {"format_type": "text", "required": false, "name": "custom_fields", "label": "Custom fields", "default_value": "", "help_string": "Optional JSON object containing additional fields to set e.g. {\"isVIP\", \"false\"}", "type": "", "value": "{\"Owner\": \"Greg Ford\", \"Category\": \"Service Desk\"}"}, {"format_type": "radio", "required": false, "name": "incident_type", "label": "Incident Type", "default_value": "standard", "help_string": "Determines whether the  incident will use the new ISM Security Incident business object", "possible_values": {"Standard": "standard", "Security (beta)": "security"}, "type": "", "value": "standard"}], "code": "import ism\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the setup parameters and prints them to the log\n    tenant = helper.get_global_setting(\"tenant\")\n    helper.log_info(\"tenant={}\".format(tenant))\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    username = helper.get_global_setting(\"username\")\n    helper.log_info(\"username={}\".format(username))\n    password = helper.get_global_setting(\"password\")\n    helper.log_info(\"password={}\".format(password))\n    role = helper.get_global_setting(\"role\")\n    helper.log_info(\"role={}\".format(role))\n    verify_server_certificate = helper.get_global_setting(\"verify_server_certificate\")\n    helper.log_info(\"verify_server_certificate={}\".format(verify_server_certificate))\n\n    # The following example gets the alert action parameters and prints them to the log\n    customer = helper.get_param(\"customer\")\n    helper.log_info(\"customer={}\".format(customer))\n\n    summary = helper.get_param(\"summary\")\n    helper.log_info(\"summary={}\".format(summary))\n\n    description = helper.get_param(\"description\")\n    helper.log_info(\"description={}\".format(description))\n\n    status = helper.get_param(\"status\")\n    helper.log_info(\"status={}\".format(status))\n\n    custom_fields = helper.get_param(\"custom_fields\")\n    helper.log_info(\"custom_fields={}\".format(custom_fields))\n\n    incident_type = helper.get_param(\"incident_type\")\n    helper.log_info(\"incident_type={}\".format(incident_type))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action create_an_incident_in_ism started.\")\n\n    username = helper.get_global_setting(\"username\")\n    password = helper.get_global_setting(\"password\")\n    api_key= helper.get_global_setting(\"api_key\")\n    opt_verify= helper.get_global_setting(\"verify_server_certificate\")\n    \n    if opt_verify==\"False\":\n        opt_verify=False\n    else:\n        opt_verify=True\n\n    tenant = helper.get_global_setting(\"tenant\")\n    #helper.log_info(\"tenant={}\".format(tenant))\n    api_key = helper.get_global_setting(\"api_key\")\n    #helper.log_info(\"api_key={}\".format(api_key))\n    role = helper.get_global_setting(\"role\")\n    #helper.log_info(\"role={}\".format(role))\n\n    customer = helper.get_param(\"customer\")\n    #helper.log_info(\"customer={}\".format(customer))\n    summary = helper.get_param(\"summary\")\n    #helper.log_info(\"summary={}\".format(summary))\n    description = helper.get_param(\"description\")\n    #helper.log_info(\"description={}\".format(description))\n    status = helper.get_param(\"status\")\n    #helper.log_info(\"status={}\".format(status))\n    custom_fields = helper.get_param(\"custom_fields\")\n    #helper.log_info(\"custom_fields={}\".format(custom_fields))\n    incident_type = helper.get_param(\"incident_type\")\n    #helper.log_info(\"custom_fields={}\".format(custom_fields))\n\n    helper.log_info(\"Calling ism.authenticate\")\n    auth_token = ism.authenticate(helper=helper,base_url=tenant,username=username,password=password,role=role, api_key=api_key, verify=opt_verify)\n    \n\n    helper.log_info(\"calling ism.create_incident\")\n    ret_val = ism.create_incident(auth_token, tenant, customer, summary, description, status, custom_fields, helper=helper,verify=opt_verify, incident_type=incident_type)\n\n    helper.log_info(\"create_incident return value={}\".format(ret_val))\n\n    return 0\n", "uuid": "bd7c49ae262d4140a9bf3d696399cf9f"}]}, "basic_builder": {"appname": "TA-ivanti-ism", "friendly_name": "Ivanti Service Manager Add-On for Splunk", "version": "1.3.1", "author": "Greg Ford", "description": "The Ivanti Service Manager (ISM) Add-On for Splunk supports ingestion of incidents, service requests and problems, as well as providing an alert action to raise an incident in ISM.", "theme": "#DA291C", "large_icon": "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", "small_icon": "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", "visible": true, "tab_version": "4.0.0", "tab_build_no": "0", "build_no": 16}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "ivanti:ism:problem", "interval": "300", "use_external_validation": true, "streaming_mode_xml": true, "name": "ism_problems_input", "title": "ISM Problems Input", "description": "", "type": "customized", "parameters": [{"name": "parameters", "label": "Parameters (URL encoded)", "help_string": "", "required": false, "format_type": "text", "default_value": "%24filter%3D%28Status%20ne%20%27resolved%27%29", "placeholder": "", "type": "text", "value": "%24filter%3D%28Status%20ne%20%27resolved%27%29"}], "data_inputs_options": [{"type": "customized_var", "name": "parameters", "title": "Parameters (URL encoded)", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "%24filter%3D%28Status%20ne%20%27resolved%27%29", "placeholder": ""}], "code": "\n# encoding = utf-8\n\n# default from AddOn Builder\nimport os\nimport sys\nimport time\nimport datetime\n\n# Custom for ISM\nimport ism\nimport json\ntry:\n    from urllib import unquote  # Python 2.X\nexcept ImportError:\n    from urllib.parse import unquote  # Python 3+\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # global_account = definition.parameters.get('global_account', None)\n    # parameters = definition.parameters.get('parameters', None)\n    pass\n\ndef collect_events(helper, ew):\n\n    loglevel = helper.get_log_level()\n    input_stanza = helper.get_input_stanza()\n    opt_username = helper.get_global_setting(\"username\")\n    opt_password = helper.get_global_setting(\"password\")\n    opt_api_key = helper.get_global_setting(\"api_key\")\n    opt_verify = helper.get_global_setting(\"verify_server_certificate\")\n    opt_role = helper.get_global_setting(\"role\")\n    opt_tenant = helper.get_global_setting(\"tenant\")\n    opt_parameters = unquote(helper.get_arg('parameters'))\n    \n    if not opt_tenant.startswith('https://'):\n        helper.log_error(\"Tenant URL *must* start with https://. Abandoning input\")\n        return\n    \n    helper.log_debug(\"ISM TA input called with opt_verify: \" + str(opt_verify))\n\n    if str(opt_verify)==\"False\":\n        opt_verify=False\n    else:\n        opt_verify=True\n\n    base_url = opt_tenant\n\n    helper.log_debug(\"ISM TA input now has opt_verify: \" + str(opt_verify))\n    helper.log_debug(\"ISM TA input called with base url: \" + opt_tenant)\n    helper.log_debug(\"Unquoted value of parameters variable is: \" + opt_parameters)\n\n    auth_token = ism.authenticate(base_url=opt_tenant,username=opt_username,password=opt_password,role=opt_role, api_key=opt_api_key, helper=helper, verify=opt_verify)\n    values = ism.get_problems(auth_token, opt_tenant, opt_parameters, helper, verify=opt_verify)\n\n    t =  \"%.3f\" % time.time()\n\n    for v in values:\n        event = helper.new_event(time=t, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(v))\n        ew.write_event(event)\n\n    '''Boilerplate code for the future\n\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    '''\n", "customized_options": [{"name": "parameters", "value": "%24filter%3D%28Status%20ne%20%27resolved%27%29"}], "uuid": "0d65c58eccdd447096f048896df5fcc9", "sample_count": 0}, {"index": "default", "sourcetype": "ivanti:ism:incident", "interval": "300", "use_external_validation": true, "streaming_mode_xml": true, "name": "ism_incidents_input", "title": "ISM Incidents Input", "description": "", "type": "customized", "parameters": [{"name": "parameters", "label": "Parameters", "help_string": "", "required": false, "format_type": "text", "default_value": "%24filter%3DStatus%20eq%20%27Active%27%20or%20Status%20eq%20%27Logged%27", "placeholder": "", "type": "text", "value": "%24filter%3DStatus%20eq%20%27Active%27%20or%20Status%20eq%20%27Logged%27"}], "data_inputs_options": [{"type": "customized_var", "name": "parameters", "title": "Parameters", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "%24filter%3DStatus%20eq%20%27Active%27%20or%20Status%20eq%20%27Logged%27", "placeholder": ""}], "code": "\n# encoding = utf-8\n\n# default from AddOn Builder\nimport os\nimport sys\nimport time\nimport datetime\n\n# Custom for ISM\nimport ism\nimport json\ntry:\n    from urllib import unquote  # Python 2.X\nexcept ImportError:\n    from urllib.parse import unquote  # Python 3+\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # global_account = definition.parameters.get('global_account', None)\n    # parameters = definition.parameters.get('parameters', None)\n    pass\n\ndef collect_events(helper, ew):\n    \n    loglevel = helper.get_log_level()\n    input_stanza = helper.get_input_stanza()\n    opt_role = helper.get_global_setting(\"role\")\n    opt_tenant = helper.get_global_setting(\"tenant\")\n    opt_parameters = unquote(helper.get_arg('parameters'))\n    opt_username= helper.get_global_setting(\"username\")\n    opt_password= helper.get_global_setting(\"password\")\n    opt_verify = helper.get_global_setting(\"verify_server_certificate\")\n    opt_api_key= helper.get_global_setting(\"api_key\")\n    \n    if not opt_tenant.startswith('https://'):\n        helper.log_error(\"Tenant URL *must* start with https://. Abandoning input\")\n        return\n    \n    helper.log_debug(\"ISM TA input called with opt_verify: \" + str(opt_verify))\n\n    if str(opt_verify)==\"False\":\n        opt_verify=False\n    else:\n        opt_verify=True\n\n    base_url = opt_tenant\n\n    helper.log_debug(\"ISM TA input now has opt_verify: \" + str(opt_verify))\n    helper.log_debug(\"ISM TA input called with base_url: \" + base_url)\n    helper.log_debug(\"Unquoted value of parameters variable is: \" + opt_parameters)\n    \n    \n    auth_token = ism.authenticate(base_url=opt_tenant,username=opt_username,password=opt_password,role=opt_role, api_key=opt_api_key, helper=helper, verify=opt_verify)\n    \n    values = ism.get_incidents(auth_token, base_url, opt_parameters, helper=helper, verify=opt_verify)\n\n    t =  \"%.3f\" % time.time()\n    \n    tenant = base_url.replace('https://','')\n    tenant = tenant.replace('http://','')\n\n    for v in values:\n        event = helper.new_event(time=t, source=tenant, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(v))\n        ew.write_event(event)\n\n    '''Boilerplate code for the future\n\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    '''\n", "customized_options": [{"name": "parameters", "value": "%24filter%3DStatus%20eq%20%27Active%27%20or%20Status%20eq%20%27Logged%27"}], "uuid": "393695bfd39a4b178f8a46dc7425b5a8", "sample_count": 0}, {"index": "default", "sourcetype": "ivanti:ism:servicereq", "interval": "300", "use_external_validation": true, "streaming_mode_xml": true, "name": "ism_service_requests_input", "title": "ISM Service Requests Input", "description": "", "type": "customized", "parameters": [{"name": "parameters", "label": "Parameters (URL encoded)", "help_string": "", "required": false, "format_type": "text", "default_value": "%24filter%3DStatus%20ne%20%27Fulfilled%27%20and%20Status%20ne%20%27Cancelled%27%20and%20Status%20ne%20%27Closed%27", "placeholder": "", "type": "text", "value": "%24filter%3DStatus%20ne%20%27Fulfilled%27%20and%20Status%20ne%20%27Cancelled%27%20and%20Status%20ne%20%27Closed%27"}], "data_inputs_options": [{"type": "customized_var", "name": "parameters", "title": "Parameters (URL encoded)", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "%24filter%3DStatus%20ne%20%27Fulfilled%27%20and%20Status%20ne%20%27Cancelled%27%20and%20Status%20ne%20%27Closed%27", "placeholder": ""}], "code": "\n# encoding = utf-8\n\n# default from AddOn Builder\nimport os\nimport sys\nimport time\nimport datetime\n\n# Custom for ISM\nimport ism\nimport json\ntry:\n    from urllib import unquote  # Python 2.X\nexcept ImportError:\n    from urllib.parse import unquote  # Python 3+\n\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # global_account = definition.parameters.get('global_account', None)\n    # parameters = definition.parameters.get('parameters', None)\n    \n    # tenant = helper.get_global_setting(\"tenant\")\n    # if not tenant.startswith('https'):\n    #     raise Exception(\"Tenant URL must start with https://\")\n\ndef collect_events(helper, ew):\n    \n    loglevel = helper.get_log_level()\n    input_stanza = helper.get_input_stanza()\n    opt_username = helper.get_global_setting(\"username\")\n    opt_password = helper.get_global_setting(\"password\")\n    opt_verify = helper.get_global_setting(\"verify_server_certificate\")\n    opt_role = helper.get_global_setting(\"role\")\n    opt_tenant = helper.get_global_setting(\"tenant\")\n    opt_api_key = helper.get_global_setting(\"api_key\")\n    opt_parameters = unquote(helper.get_arg('parameters'))\n    \n    if not opt_tenant.startswith('https://'):\n        helper.log_error(\"Tenant URL *must* start with https://. Abandoning input\")\n        return\n    \n    helper.log_debug(\"ISM TA input called with opt_verify: \" + str(opt_verify))\n\n    if str(opt_verify)==\"False\":\n        opt_verify=False\n    else:\n        opt_verify=True\n\n    base_url = opt_tenant\n\n    helper.log_debug(\"ISM TA input now has opt_verify: \" + str(opt_verify))\n    helper.log_debug(\"ISM TA input called with base url: \" + opt_tenant)\n    auth_token = ism.authenticate(base_url=opt_tenant,username=opt_username,password=opt_password,role=opt_role, api_key=opt_api_key, helper=helper, verify=opt_verify)\n\n    values = ism.get_servicereqs(auth_token, opt_tenant, opt_parameters, helper=helper, verify=opt_verify)\n\n    t =  \"%.3f\" % time.time()\n\n    for v in values:\n        event = helper.new_event(time=t, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(v))\n        ew.write_event(event)\n\n    '''Boilerplate code for the future\n\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    '''\n", "customized_options": [{"name": "parameters", "value": "%24filter%3DStatus%20ne%20%27Fulfilled%27%20and%20Status%20ne%20%27Cancelled%27%20and%20Status%20ne%20%27Closed%27"}], "uuid": "4c9497d629934869999a2d8497b3241e", "sample_count": 0}]}, "field_extraction_builder": {"ivanti:ism:incident": {"data_format": "json"}, "ivanti:ism:problem": {"data_format": "json"}, "ivanti:ism:servicereq": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "customized_settings": [{"required": true, "name": "tenant", "label": "Tenant URL", "default_value": "", "placeholder": "https:// (no http)", "help_string": "e.g. https://apacdemo1-try.saasitau.com. Append /HEAT for on-premises installations.", "type": "text", "format_type": "text", "value": "http://apacdemo1-try.saasitau.com"}, {"required": false, "name": "api_key", "label": "API Key", "placeholder": "", "default_value": "", "help_string": "Provide as an optional alternative to using username/password for authentication", "type": "password", "format_type": "password", "value": ""}, {"required": false, "name": "username", "label": "Username", "default_value": "", "placeholder": "", "help_string": "Provide if not using API key", "type": "text", "format_type": "text", "value": "greg.ford"}, {"required": false, "name": "password", "label": "Password", "placeholder": "", "default_value": "", "help_string": "Provide if not using API key", "type": "password", "format_type": "password", "value": ""}, {"required": false, "name": "role", "label": "Role", "default_value": "", "placeholder": "Service Desk Analyst", "help_string": "Provide if not using API key", "type": "text", "format_type": "text", "value": "Admin"}, {"required": false, "name": "verify_server_certificate", "label": "Verify server certificate", "default_value": true, "help_string": "Uncheck to ignore SSL server cert validation errors", "type": "checkbox", "format_type": "checkbox", "value": true}]}}, "sourcetype_builder": {"ivanti:ism:incident": {"metadata": {"event_count": 0, "data_input_name": "ism_incidents_input", "extractions_count": 0, "cims_count": 0}}, "ivanti:ism:servicereq": {"metadata": {"event_count": 0, "data_input_name": "ism_service_requests_input", "extractions_count": 0, "cims_count": 0}}, "ivanti:ism:problem": {"metadata": {"event_count": 0, "data_input_name": "ism_problems_input", "extractions_count": 0, "cims_count": 0}}}, "validation": {}}